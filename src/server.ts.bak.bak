import WebSocket from 'ws';
import http from 'http';
import express from 'express';
import * as dotenv from 'dotenv';
import * as fs from 'fs';

dotenv.config();

const API_KEY = process.env.ELEVENLABS_API_KEY!;
const VOICE_ID = process.env.VOICE_ID!;
const PORT = process.env.PORT || 3020;
const model = 'eleven_flash_v2_5';

const app = express();
app.use(express.static('src/public'));
const server = http.createServer(app);
const wss = new WebSocket.Server({ server });

// Track all connected browser clients
const browserClients = new Set<WebSocket>();

wss.on('connection', (ws) => {
  console.log('[Browser] WebSocket client connected');
  browserClients.add(ws);

  ws.on('message', async (message) => {
    try {
      const { text } = JSON.parse(message.toString());
      if (typeof text !== 'string' || !text.trim()) {
        console.warn('[Server] Empty or invalid text received');
        return;
      }

      console.log('[Server] Text received from browser:', text);

      const timestamp = Date.now();
      const outputDir = './output';
      const filePath = `${outputDir}/audio_${timestamp}.mp3`;
      if (!fs.existsSync(outputDir)) fs.mkdirSync(outputDir);

      const writeStream = fs.createWriteStream(filePath, { flags: 'a' });

      const elevenLabsWS = new WebSocket(
        `wss://api.elevenlabs.io/v1/text-to-speech/${VOICE_ID}/stream-input?model_id=${model}`,
        {
          headers: { 'xi-api-key': API_KEY },
        }
      );

      let chunkCount = 0;

      elevenLabsWS.on('open', () => {
        console.log('[ElevenLabs] Connection opened for new text');

        elevenLabsWS.send(JSON.stringify({
          text: ' ', // warm-up chunk
          voice_settings: {
            stability: 0.5,
            similarity_boost: 0.8,
            use_speaker_boost: false,
          },
          generation_config: {
            chunk_length_schedule: [120, 160, 250, 290],
          },
        }));

        elevenLabsWS.send(JSON.stringify({ text , flush: true}));     // actual content
        elevenLabsWS.send(JSON.stringify({ text: '' })); // end of stream
      });

      elevenLabsWS.on('message', (event) => {
        const data = JSON.parse(event.toString());
console.log(JSON.stringify(data,null,2));
        if (data['audio']) {
          chunkCount++;
          const base64Audio = data['audio'];
          const audioBuffer = Buffer.from(base64Audio, 'base64');

          // Save to local file
          writeStream.write(audioBuffer, (err) => {
            if (err) console.error('[File] Write error:', err);
          });



          // Send to the original browser client only
          if (ws.readyState === WebSocket.OPEN) {
            ws.send(base64Audio);
          }

          console.log(`[Stream] Sent chunk (${audioBuffer.length} bytes)`);
        }
      });

      elevenLabsWS.on('close', () => {
        writeStream.end();
        console.log('[ElevenLabs] Stream ended for this text');
      });

      elevenLabsWS.on('error', (err) => {
        console.error('[ElevenLabs] WebSocket error:', err);
      });

    } catch (err) {
      console.error('[Server] Error parsing message from browser:', err);
    }
  });

  ws.on('close', () => {
    console.log('[Browser] WebSocket client disconnected');
    browserClients.delete(ws);
  });
});

server.listen(PORT, () => {
  console.log(`[Server] Listening at http://localhost:${PORT}`);
});
